name: Print GitHub Object

on:
  issues:
  repository_dispatch:
    types:
      - print_github_object
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - closed
  workflow_dispatch:
    inputs:
      commit:
        description: "Commit"
        required: true
        default: "main"
      flag:
        description: "Flag"
        type: boolean
        default: false
      environment:
        description: "Environment"
        type: environment

env:
  BRANCH_NAME: ${{ github.base_ref || github.ref_name }}

jobs:
  Job1:
    environment:
      name: ${{ inputs.environment == 'prd' && 'prd-reviewers' || '' }} #${{ format('{0}-reviewers', inputs.environment) }}
      url: https://argocd-qms.nos.pt/applications/argocd/my-app
    runs-on: ubuntu-latest
    if: true
    outputs:
      flag: ${{ steps.print11.outputs.flag }}
    steps:
      - name: Print 1
        id: print1
        env:
          ENVIRONMENT: ${{ inputs.environment == 'prd' && 'prd-reviewers' || '' }} #${{ format('{0}-reviewers', inputs.environment) }}
        run: |
          echo "my_var=1" >> $GITHUB_ENV
          echo myvar=$my_var
          echo "ENVIRONMENT = $ENVIRONMENT"

      - name: Generate list using Markdown
        run: |
          echo "# Header 1" >> $GITHUB_STEP_SUMMARY
          echo "## Header 2" >> $GITHUB_STEP_SUMMARY
          echo "### Header 3" >> $GITHUB_STEP_SUMMARY
          echo "#### Header 4" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This is the lead in sentence for the list" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "- Lets add a bullet point" >> $GITHUB_STEP_SUMMARY
          echo "- Lets add a second bullet point" >> $GITHUB_STEP_SUMMARY
          echo "- How about a third one?" >> $GITHUB_STEP_SUMMARY

      - name: Print 11
        id: print11
        run: |
          echo myvar=$my_var
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "myvar=$my_var" >> $GITHUB_STEP_SUMMARY
          echo "flag=false" >> $GITHUB_OUTPUT

  Job2:
    runs-on: ubuntu-latest
    if: needs.Job1.outputs.flag
    needs: [Job1]
    steps:
      - name: Print 2
        id: print2
        run: |
          echo 2
          echo ${{ needs.Job1.outputs.flag }}

  GitHub:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        if: github.event_name  != 'workflow_dispatch'
        uses: actions/checkout@v4

      - name: Checkout code with commit
        if: github.event_name  == 'workflow_dispatch'
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commit }}

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46

      - name: List all changed files
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          echo "${ALL_CHANGED_FILES}"

      - name: ENV Vars
        id: env-vars
        run: env

      - name: print client_payload
        id: payload
        run: |
          echo "BRANCH_NAME: ${{ env.BRANCH_NAME }}"
          echo "${{ toJson(github.event.client_payload) }}"

      - name: UUIDGEN
        id: uuidgen
        run: |
          echo "UUIDGEN: $(uuidgen)"

      - name: Get GITHUB_SHA 1
        if: inputs.flag
        id: sha1
        run: |
          echo "GITHUB_SHA: $GITHUB_SHA"

      - name: Failure1
        if: always() && inputs.flag
        id: failure1
        run: echo ${{ steps.sha1.outcome }}

      - name: Set outputs
        id: vars
        run: |
          git rev-parse HEAD
          echo "GITHUB_SHA=$(git rev-parse HEAD)" >> GITHUB_ENV

      - name: Get GITHUB_SHA 2
        id: sha2
        run: |
          echo "GITHUB_SHA: $GITHUB_SHA"
          exit 0

      - name: Failure2
        if: always()
        id: failure2
        run: echo ${{ steps.sha2.outcome }}

      - name: Failure1+2
        if: always()
        id: failure12
        run: echo ${{ steps.uuidgen.outcome && steps.sha1.outcome && steps.sha2.outcome }}

      - name: Write step status
        id: step-status
        run: |
          echo SHA1
          echo "${{ steps.sha1.outcome }}"
          echo ""
          echo SHA2
          echo "${{ steps.sha2.outcome }}"
          echo ""
          echo CONCLUSION
          echo "${{ steps.sha2.conclusion }}"

      - name: Print Event Type
        run: |
          echo "${{ github.event.pull_request.merged }}"
          echo "${{ github.event.pull_request.merged == false }}"
          echo "${{ github.event_name }}"
          echo "${{ github.base_ref || github.ref_name }}"

      - name: Print github JSON
        run: |
          echo "${{ toJSON(github) }}"
          

          echo "Payload:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '${{ toJSON(github) }}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          cat <<EOF > scan_result.sarif
          {
            "top1": "A",
            "top2": {
              "sub1": "A1",
              "sub2": "A2"
            }
          }
          EOF

#      - name: Upload file
#        uses: actions/upload-artifact@v4
#        with:
#          name: scan_result.sarif
#          path: scan_result.sarif
